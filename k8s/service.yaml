apiVersion: v1
kind: Service
metadata:
  name: gemini-ocr-service
  namespace: gemini-ocr
  labels:
    app: gemini-ocr
    component: app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: gemini-ocr
    component: app

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: gemini-ocr
  labels:
    app: gemini-ocr
    component: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: gemini-ocr
    component: redis

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gemini-ocr-ingress
  namespace: gemini-ocr
  labels:
    app: gemini-ocr
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
spec:
  tls:
  - hosts:
    - api.gemini-ocr.com
    secretName: gemini-ocr-tls
  rules:
  - host: api.gemini-ocr.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gemini-ocr-service
            port:
              number: 80